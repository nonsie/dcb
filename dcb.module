<?php

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_presave().
 *
 * Populates dcb region if it currently has no value.
 */
function dcb_entity_presave(EntityInterface $entity) {
  /** @var \Drupal\node\Entity\Node $entity */
  if ($entity->getEntityTypeId() !== 'node') {
    return;
  }
  // Find any dynoblock fields attached to an entity.
  $fieldnames = [];
  $fields = $entity->getFieldDefinitions();
  /**
   * @var  string $fieldname
   * @var \Drupal\Core\Field\FieldDefinitionInterface $field
   */
  foreach ($fields as $fieldname => $field) {
    if (substr($fieldname, 0, 6) !== 'field_') {
      continue;
    }
    $fieldtype = $field->getType();
    if ($fieldtype !== 'dcb') {
      continue;
    }
    $fieldnames[] = $fieldname;
  }
  if (!empty($fieldnames)) {
    // Handle each dynoblock field.
    foreach ($fieldnames as $fieldname) {
      $dcb_field = $entity->get($fieldname);
      if ($dcb_field->isEmpty()) {
        $rand = md5(random_bytes(32) . time());
        $dcb_field->set(0, $rand);
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Adds DCB javascript and css to the page.
 */
function dcb_page_attachments(array &$page) {
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute();
  if (!$is_admin) {
    if (\Drupal::currentUser()->hasPermission('edit dcb component entities')) {
      $page['#attached']['library'][] = 'dcb/edit';
      $page['#attached']['library'][] = 'dcb/font-awesome';
      $configs['load_ui'] = TRUE;
      $configs['dir_uri'] = '/' . drupal_get_path('module', 'dcb');
    }
    else {
      $configs = ['load_ui' => FALSE];
    }
    $page['#attached']['library'][] = 'dcb/core';

    // Add configurable JS.
    $configs['ui_scroll'] = isset($configs['ui_scroll']) && $configs['ui_scroll'] === FALSE ? FALSE : TRUE;

    // Add current path for defining cache tags on save.
    $current_path = \Drupal::service('path.current')->getPath();
    $exploded_path = explode('/', $current_path);
    if (!empty($exploded_path[1]) && !empty($exploded_path[2])) {
      $configs['cache']['entity'] = $exploded_path[1];
      $configs['cache']['id'] = $exploded_path[2];
    }

    $page['#attached']['drupalSettings']['dcb']['core'] = $configs;
  }
}

/**
 * Implements hook_theme().
 */
function dcb_theme() {
  $theme = [];
  $theme['dcb_component'] = [
    'render element' => 'elements',
    'file' => 'dcb_component.page.inc',
    'template' => 'dcb_component',
  ];
  $theme['dcb_component_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'dcb_component.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function dcb_theme_suggestions_dcb_component(array $variables) {
  $suggestions = [];
  /** @var \Drupal\dcb\Entity\DCBComponent $entity */
  $entity = $variables['elements']['#dcb_component'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'dcb_component__' . $sanitized_view_mode;
  $suggestions[] = 'dcb_component__' . $entity->bundle();
  $suggestions[] = 'dcb_component__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'dcb_component__' . $entity->id();
  $suggestions[] = 'dcb_component__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function dcb_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  if ($view_mode !== 'dcb_inline_viewmode') {
    return NULL;
  }

  /** @var \Drupal\dcb\Entity\DCBComponent $component */
  $component = $entity;
  $displayRepository = \Drupal::service('entity_display.repository');

  // Set view mode to 'Default', this is for entities without
  // a view mode selector field.
  $view_mode = 'default';

  // Find the selected mode
  $selected_mode = $component->get('view_mode')->getString();

  // Get all the available view modes for this bundle.
  $available_modes = array_keys($displayRepository->getViewModeOptionsByBundle('dcb_component', $component->bundle()));

  // If the selected mode exists in the list of available modes, change the view mode.
  if (!empty($selected_mode) && in_array($selected_mode, $available_modes)) {
    $view_mode = $selected_mode;
  }

  return $view_mode;
}



